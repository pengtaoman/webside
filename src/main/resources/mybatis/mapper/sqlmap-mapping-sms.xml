<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.webside.user.mapper.SmsMapper">
	<!--mybatis ehcache缓存配置,以下两个<cache>标签二选一,第一个可以输出日志,第二个不输出日志 -->
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/> 
	<!-- <cache type="org.mybatis.caches.ehcache.EhcacheCache"/> -->
	<resultMap id="BaseResultMap" type="com.webside.user.model.SmsDTO">
		<id property="id" column="id"/>
		<result property="owner" column="owner" />
		<result property="status" column="status"/>
		<result property="idInfo" column="id_info"/>
		<association property="smsInfo" 
			column="{reqId=id_info}" select="selectInfoById">
		</association>
	</resultMap>

	<resultMap id="InfoResultMap" type="com.webside.user.model.SmsInfoEntity">
		<id property="id" column="s_id" />
		<result property="type" column="type" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createTime" column="create_time" />
	</resultMap>
	<sql id="smsInfo">
		s_id,
		type,
		title,
		content,
		create_time
	</sql>
	
	<select id="selectInfoById" parameterType="map" resultMap="InfoResultMap" useCache="true">
		select <include refid="smsInfo" /> 
		from tb_sms_info 
		where s_id = #{reqId}
	</select>
	
	<select id="queryListByPage" parameterType="map" resultMap="BaseResultMap" useCache="true">
	SELECT
	s.id,
	s.owner,
	s.status,
	s.id_info,
	si.s_id,
	si.title,
	si.type,
	si.content,
	si.create_time
	FROM tb_sms s LEFT JOIN tb_sms_info si ON s.id_info = si.s_id
	<where>
		<if test="owner != null and owner != ''">
			and owner = #{owner}
		</if>
		<choose>
			<when test="query_expr != null and (query_expr == 'like' or query_expr == 'not like')">
				<if test="title != null and title != ''">
					and title ${query_expr} '%${title}%'
				</if>
				<if test="content != null and content != ''">
					and content ${query_expr} '%${content}%'
				</if>
				
			</when>
			<when test="query_expr != null and (query_expr != 'like' and query_expr != 'not like')">
				<if test="title != null and title != ''">
					and title ${query_expr} #{title}
				</if>
				<if test="content != null and content != ''">
					and content ${query_expr} #{content}
				</if>
			</when>
			<otherwise>
				<if test="createTime != null and startDate != null">
						and create_time &gt;= #{startDate}
					</if>
					<if test="createTime != null and endDate != null">
						and create_time &lt;= #{endDate}
					</if>
			</otherwise>
			
		</choose>
	</where>
		order by create_time DESC
	</select>
	
	<select id="queryList" parameterType="map" resultMap="BaseResultMap"  useCache="true">
		SELECT 
		s.id,
		s.owner,
		s.status,
		s.id_info,
		si.s_id,
		si.title,
		si.type,
		si.content,
		si.create_time
		from (select * FROM tb_sms where owner=#{owner}) s 
		LEFT JOIN tb_sms_info si ON s.id_info = si.s_id
		order by si.create_time DESC
	<!--	limit 10 offset 9 -->
	</select>
	
	<select id="findByTitle" parameterType="map" resultMap="BaseResultMap"  useCache="true">
		SELECT 
		s.id,
		s.owner,
		s.status,
		s.id_info,
		si.s_id,
		si.title,
		si.type,
		si.content,
		si.create_time
		from (select * FROM tb_sms where owner=#{owner}) s 
		LEFT JOIN tb_sms_info si ON s.id_info = si.s_id
		where si.title like '%${title}%'
		order by si.create_time DESC
	</select>
	
	<select id="count" parameterType="map" resultType="int" useCache="true">
		SELECT count(*) FROM tb_sms 
		<where>
			<if test="owner != null">
				and owner = #{owner} 
			</if>
			<if test="status != null">
				and status = #{status} 
			</if>
		</where>
	</select>
	
	<insert id="insert" parameterType="com.webside.user.model.SmsDTO" useGeneratedKeys="true" keyProperty="id">
		insert ignore into tb_sms (
			owner,
			status,
			id_info
			)   
		values (
			#{owner},
			#{status},
			#{idInfo}
			)  
	</insert>
	
	<insert id="insertSmsInfo" parameterType="map" useGeneratedKeys="true" keyProperty="record.id">
		insert ignore into tb_sms_info (
				type,
		title,
		content,
		create_time
			)   
		values (
			#{record.type},
			#{record.title},
			#{record.content},
			now()
			)  
	</insert>

	<update id="updateStatus" parameterType="long" flushCache="true">
		update tb_sms set status = 1
		where  id = #{id}
	</update>
	
	<update id="updateStatusBatch" parameterType="list" flushCache="true">
		update tb_sms set status = 1 where id in  
		 <foreach collection="list" item = "id" open="(" separator="," close=")">
	    ${id}  
	    </foreach> 
	</update>
	
	<delete id="deleteBatchById" parameterType="list">
		<![CDATA[  
       delete from tb_sms where id in  
    	]]>  
	    <foreach collection="list" item = "id" open="(" separator="," close=")">
	    ${id}  
	    </foreach>  
	</delete>
</mapper>